{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["colors","c","bg","App","state","started","pageNumber","focused","codeError","treasureHunted","congratulations","showPointer","beginClick","setState","blurred","handleCode","e","value","target","length","config","pages","code","finalTitle","finalDescription","blur","handleNext","this","setTimeout","description","homeDescription","split","className","homeTitle","slice","map","_","i","key","onClick","title","maxLength","placeholder","type","onFocus","onBlur","onChange","href","rand","parseInt","Math","random","style","backgroundColor","color","renderCongrats","renderHome","renderTreasureHunt","renderFinalScreen","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c89cd02f.chunk.js","sourcesContent":["import React, { Component, Fragment } from 'react';\nimport './App.css';\nimport config from './config';\n\nconst colors = [\n  { c: 'brown', bg: '#15f4ee' },\n  { c: 'brown', bg: 'gold' },\n  { c: 'white', bg: 'brown' },\n  { c: 'brown', bg: '#ccff00' }\n];\n\nexport default class App extends Component {\n  state = {\n    started: false,\n    pageNumber: 1,\n    focused: false,\n    codeError: false,\n    treasureHunted: false,\n    congratulations: false,\n    showPointer: true,\n  };\n\n  beginClick = () => {\n    this.setState({ started: true });\n  };\n\n  focused = () => {\n    this.setState({ focused: true });\n    const { codeError, showPointer } = this.state;\n\n    if (codeError) {\n      this.setState({ codeError: false });\n    }\n    if (showPointer) {\n      this.setState({ showPointer: false });\n    }\n  };\n\n  blurred = () => {\n    this.setState({ focused: false });\n    const { codeError } = this.state;\n\n    if (codeError) {\n      this.setState({ codeError: false });\n    }\n  };\n\n  handleNext() {\n    this.setState({ pageNumber: this.state.pageNumber + 1, congratulations: true });\n    setTimeout(() => {\n      this.setState({ congratulations: false });\n    }, 1900);\n  }\n\n  handleCode = (e) => {\n    const value = e.target.value;\n    const { codeError } = this.state;\n\n    if (codeError) {\n      this.setState({ codeError: false });\n    }\n\n    if (value.length === 4) {\n      const { pageNumber } = this.state;\n      const { code } = config.pages[pageNumber - 1];\n\n      if (value === code) {\n        if (config.pages.length === pageNumber) {\n          if (config.finalTitle || config.finalDescription) {\n            this.setState({ treasureHunted: true });\n          } else {\n            this.setState({ pageNumber: 1, started: false });\n          }\n        } else {\n          e.target.blur();\n          this.handleNext();\n        }\n      } else {\n        this.setState({ codeError: true });\n      }\n\n      e.target.value = '';\n    }\n  };\n\n  renderHome() {\n    const description = config.homeDescription.split('\\n');\n    return (\n      <div className=\"app-container\">\n        <div className=\"home\">\n          <div className=\"home-title\">{config.homeTitle}</div>\n          <div className=\"home-description\">\n            {description[0]}\n            {description.slice(1).map((_, i) => (\n              <Fragment key={i}>\n                <br />\n                {description[i + 1]}\n              </Fragment>\n            ))}\n          </div>\n          <div className=\"home-button\" onClick={this.beginClick}>Begin</div>\n        </div>\n      </div>\n    );\n  }\n\n  renderTreasureHunt() {\n    const { pageNumber, focused, codeError, showPointer } = this.state;\n    if (pageNumber) {\n      const { title, description, code } = config.pages[pageNumber - 1];\n      return (\n        <div className=\"treasure-hunt-container\">\n          <div className=\"treasure-hunt-title\">{title}</div>\n          <div className=\"treasure-hunt-description\">{description}</div>\n          {code &&\n            <input\n              className={`input-code ${codeError ? 'input-code-error' : ''}`}\n              maxLength={4}\n              placeholder={focused ? '' : 'Enter code'}\n              type=\"text\"\n              onFocus={this.focused}\n              onBlur={this.blurred}\n              onChange={this.handleCode}\n            />\n          }\n          {showPointer && <div className=\"code-pointer\">{' ðŸ‘† '}</div>}\n        </div>\n      );\n    }\n\n    return null;\n  }\n\n  renderFinalScreen() {\n    const description = config.finalDescription.split('\\n');\n    return (\n      <div className=\"app-container\">\n        <div className=\"home\">\n          <div className=\"home-title\">{config.finalTitle}</div>\n          <div className=\"home-description\">\n            {description[0]}\n            {description.slice(1).map((_, i) => (\n              <Fragment key={i}>\n                <br />\n                {description[i + 1]}\n              </Fragment>\n            ))}\n          </div>\n          <a href=\"http://www.worldofveg.com/\" className=\"no-button\">No</a>\n          <a href=\"http://www.worldofveg.com/\" className=\"yes-button\">Yes</a>\n        </div>\n      </div>\n    );\n  }\n\n  renderCongrats() {\n    const rand = parseInt(colors.length * Math.random());\n    const { c, bg } = colors[rand];\n    return (\n      <div className=\"poster-container\" style={{ backgroundColor: bg }}>\n        <div className=\"poster-shine\">\n          <div className=\"upper-gradient\" />\n          <div className=\"lower-gradient\" />\n        </div>\n        <div className=\"poster-title\" style={{ color: c }}>Congratulations !!!</div>\n      </div>\n    );\n  }\n\n  render () {\n    const { started, treasureHunted, congratulations } = this.state;\n\n    return (\n      <Fragment>\n        {congratulations && this.renderCongrats()}\n        {!started && !treasureHunted && this.renderHome()}\n        {started && !treasureHunted && this.renderTreasureHunt()}\n        {treasureHunted && this.renderFinalScreen()}\n      </Fragment>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}